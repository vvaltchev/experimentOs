#!/usr/bin/env bash
# SPDX-License-Identifier: BSD-2-Clause

############################################
# CONSTANTS

VERSION_REGEX='[0-9]+[.][0-9]+[.][0-9]+([.][0-9]+)*'

RED='\033[0;31m'
GREEN='\033[0;32m'
BROWN='\033[0;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
LGRAY='\033[0;37m'
DGRAY='\033[1;37m'
LRED='\033[1;31m'
LGREEN='\033[1;32m'
YELLOW='\033[1;33m'
LBLUE='\033[1;34m'
LMAGENTA='\033[1;35m'
LCYAN='\033[1;36m'
WHITE='\033[1;37m'
RATTRS='\033[0m'

if [ -n "$TRAVIS" ]; then

   echo "CI Detected: TRAVIS"
   export RUNNING_IN_CI=1

elif [ -n "$CIRCLECI" ]; then

   echo "CI Detected: CIRCLE"
   export RUNNING_IN_CI=1

elif [ -n "$AZURE_HTTP_USER_AGENT" ]; then

   echo "CI Detected: AZURE PIPELINES"
   export RUNNING_IN_CI=1

else

   if [[ "$RUNNING_IN_CI" == "1" ]]; then
      echo "CI Detected: UNKNOWN"
   else
      echo "CI Detected: None [Assuming user machine]"
   fi
fi

############################################
# FUNCTIONS

# $1 version in the format "major.minor.patchlevel"
# $2 component number to get (1 => major, 2 => minor, 3 => patchlevel)
function get_version_comp {
   echo -ne $1 | grep -Eo '[0-9]+' | head -$2 | tail -1
}

# $1 = program name
function generic_get_version_str {
   $1 --version | head -1 | grep -Eo "${VERSION_REGEX}[ ]*$" | head -1
}

# $1 = command
function run_command {
   echo "Running command: $1"
   eval "$1"
}

# $1 = command
# $2 = output file
function run_command2 {
   echo "Running command: $1 &> $2"
   eval "$1 &> $2"
}

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

function show_work_on_component_msg {
   echo
   echo "*** $1 ***"
   echo
}

function show_skip_component_msg {
   echo "NOTE: Skipping $1"
}

# $1 = program name
# $2 = min version string
function show_too_old_and_exit {
   echo "System's $1 is too old. Version >= $2 is required."
   exit 1
}

# $1 = program name
# $2 = current version string (i.e. "1.2.3")
# $3 = min version string (i.e. "1.2.3")
function fail_if_too_old {

   major=$(get_version_comp $2 1)
   minor=$(get_version_comp $2 2)
   echo "[cmake_run] $1 version (parsed): $major.$minor"

   min_major=$(get_version_comp $3 1)
   min_minor=$(get_version_comp $3 2)

   if [ $major -lt $min_major ]; then
      show_too_old_and_exit $1 $3
   elif [ $major -eq $min_major ] && [ $minor -lt $min_minor ]; then
      show_too_old_and_exit $1 $3
   fi
}

function download_file_in_cache {

   local url="$1"
   local filename="$2"

   if ! [ -f $TC/cache/$filename ]; then
      (cd $TC/cache && wget $url/$filename)
   else
      echo "NOTE: Skipping the download of $filename"
   fi
}

function extract_cachefile_tar_gz {

   local tarfile="$1"
   local internalDirName="$2"
   local newDirName="$3"

   echo "Extracting $tarfile..."
   tar xfz $TC/cache/$tarfile

   if ! [ "$internalDirName" = "--" ]; then
      if ! [ "$internalDirName" = "$newDirName" ]; then

         if ! [ -d "$internalDirName" ]; then
            echo "ERROR: internal dir: '$internalDirName' not found"
            exit 1
         fi

         if [ -d "$newDirName" ]; then
            echo "ERROR: new dir: '$newDirName' exists"
            exit 1
         fi

         mv "$internalDirName" "$newDirName"
      fi
   fi

   echo "Extracting completed."
}

function extract_cachefile_tar_bz {

   local tarfile="$1"
   local internalDirName="$2"
   local newDirName="$3"

   echo "Extracting $tarfile..."
   tar xfj $TC/cache/$tarfile

   if ! [ "$internalDirName" = "--" ]; then
      if ! [ "$internalDirName" = "$newDirName" ]; then

         if ! [ -d "$internalDirName" ]; then
            echo "ERROR: internal dir: '$internalDirName' not found"
            exit 1
         fi

         if [ -d "$newDirName" ]; then
            echo "ERROR: new dir: '$newDirName' exists"
            exit 1
         fi

         mv "$internalDirName" "$newDirName"
      fi
   fi

   echo "Extracting completed."
}

function download_git_repo_in_cache {

   local url="$1"
   local tag="$2"
   local tarname="$3"
   local dirname="$4"

   if [ -f $TC/cache/$tarname ]; then
      return
   fi

   if [ -z "$tag" ]; then
      git clone --depth 1 "$url" $dirname
   else
      git clone --branch $tag --depth 1 "$url" $dirname
   fi

   tar cfz $tarname $dirname
   mv $tarname $TC/cache
   rm -rf $dirname
}

function get_32bit_libs_pkg {

   if ! [ -f $TC/.distro ]; then
      echo "Linux distribution not fully supported by this script."
      exit 1
   fi

   local distro=`cat $TC/.distro`

   case $distro in

      debian)
         echo gcc-multilib
      ;;

      fedora)
         echo glibc-devel.i686
      ;;

      arch)
         echo lib32-glibc
      ;;

      opensuse)
         echo glibc-devel-32bit
      ;;

      *)
         echo "Unknown Linux distribution"
         exit 1
      ;;

   esac
}

function get_rpm2cpio_pkg {

   if ! [ -f $TC/.distro ]; then
      echo "Linux distribution not fully supported by this script."
      exit 1
   fi

   local distro=`cat $TC/.distro`

   case $distro in

      debian)
         echo rpm2cpio
      ;;

      fedora)
         echo cpio
      ;;

      arch)
         echo rpmextract
      ;;

      opensuse)
         echo cpio
      ;;

      *)
         echo "Unknown Linux distribution"
         exit 1
      ;;

   esac
}

function install_pkg_on_demand {

   local pkg=$1
   local distro=`cat $TC/.distro`
   local install_pkg="$MAIN_DIR/scripts/tc/$distro/install_pkg"

   if [ "$RUNNING_IN_CI" == 1 ]; then
      $install_pkg -ci $pkg
   else
      $install_pkg $pkg
   fi
}

function install_32bit_libs {

   if ! [ -f $TC/.distro ]; then
      echo "Unable to check the presence of 32-bit glibc on this system: "
      echo "Linux distribution not fully supported by this script."
      echo "WARNING: the current operation might fail."
      return
   fi

   install_pkg_on_demand $(get_32bit_libs_pkg)
}

function install_rpm2cpio {

   if ! [ -f $TC/.distro ]; then
      echo "Linux distribution not fully supported by this script."
      echo "Please make sure that \"rpm2cpio\" is installed on the system."
      echo "WARNING: the current operation might fail."
      return
   fi

   install_pkg_on_demand $(get_rpm2cpio_pkg)
}
