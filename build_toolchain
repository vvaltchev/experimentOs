#!/bin/bash

##############################################
# Internal utility functions
##############################################

function run_command {
   echo "Running command: $1"
   $1
}

function run_command2 {
   echo "Running command: $1 &> $2"
   $1 &> $2
}

##############################################
# Install the necessary packages using apt
##############################################

debian_pkg_list=()
debian_pkg_list+=(wget)
debian_pkg_list+=(gcc)
debian_pkg_list+=(g++)
debian_pkg_list+=(git)
debian_pkg_list+=(nasm)
debian_pkg_list+=(gcc-multilib)
debian_pkg_list+=(g++-multilib)
debian_pkg_list+=(make)
debian_pkg_list+=(binutils)
debian_pkg_list+=(binutils-multiarch)
debian_pkg_list+=(mtools)
debian_pkg_list+=(qemu-system-x86)

function install_debian_family {

   packages_list=( "${debian_pkg_list[@]}" )
   to_install=()

   echo Checking the packages that need to be installed

   for x in ${packages_list[@]}; do
      echo -ne "Checking $x... "

      if [ "`dpkg -s $x 2>&1 | grep Status`" ]; then
         echo OK
      else
         echo NOT found
         to_install+=($x)
      fi
   done

   echo

   if [ ${#to_install[@]} -ne 0 ]; then
      echo ${#to_install[@]} packages need to be installed
      tmp="${to_install[@]}"
      run_command "sudo apt install $tmp"
   else
      echo "You are all set, no packages need to be installed."
   fi
}

function install_fedora {

   packages_list=()
   packages_list+=(wget)
   packages_list+=(gcc)
   packages_list+=(gcc-c++)
   packages_list+=(git)
   packages_list+=(nasm)
   packages_list+=(make)
   packages_list+=(binutils)
   packages_list+=(mtools)
   packages_list+=(qemu-system-x86)
   packages_list+=(bzip2)

   to_install=()

   echo Checking the packages that need to be installed

   for x in ${packages_list[@]}; do
      echo -ne "Checking $x... "

      if dnf list installed $x &> /dev/null; then
         echo OK
      else
         echo NOT found
         to_install+=($x)
      fi
   done

   if [ ${#to_install[@]} -ne 0 ]; then
      echo ${#to_install[@]} packages need to be installed
      tmp="${to_install[@]}"
      run_command "sudo dnf install $tmp"
   else
      echo "You are all set, no packages need to be installed."
   fi
}


function install_packages {

   rel_files=`echo /etc/*release`
   lsb="/etc/lsb-release"

   if [ -f $lsb ] && [ "$(grep -Ei 'debian|buntu|mint' $lsb)" ]; then

      install_debian_family

   elif echo $rel_files | grep -Ei 'fedora' - &> /dev/null; then

      install_fedora

   else

      echo "Your distribution is not fully supported by this script."
      echo "The supported distros are:"
      echo "  * Ubuntu"
      echo "  * Debian"
      echo "  * Mint"
      echo "  * Fedora"
      echo "In order to compile exOS on this distro, please make sure the "
      echo "following packages (ubuntu package names) are installed:"

      for x in ${debian_pkg_list[@]}; do
         echo "  * $x"
      done

      echo "After that, re-run this script with the option --skip-install-pkgs"
      exit 1
   fi

}

###############################
# CMake 3.7
###############################

function build_cmake {

   pushd .
   wget https://cmake.org/files/v3.7/cmake-3.7.0-Linux-x86_64.tar.gz
   tar xf cmake-3.7.0-Linux-x86_64.tar.gz
   CMAKE=$TC/cmake-3.7.0-Linux-x86_64/bin/cmake
   popd

}

###############################
# LCOV (front end for GCOV)
###############################

function build_lcov {

   pushd .
   git clone https://github.com/linux-test-project/lcov.git
   cd lcov
   git checkout v1.13
   popd

}

###############################
# Build dietlibc
###############################

function build_dietlibc {

   pushd .

   wget https://www.fefe.de/dietlibc/dietlibc-0.33.tar.bz2
   tar xfj dietlibc-0.33.tar.bz2
   cd dietlibc-0.33
   sed -i 's/#define WANT_SYSENTER/\/\/#define WANT_SYSENTER/g' dietfeatures.h
   sed -i 's/-Wno-unused -Wredundant-decls/-Wno-unused -Wredundant-decls -fno-stack-protector/g' Makefile
   # The build of dietlibc fails even when succeeds, when we cross-build for i386
   # So, disabling the 'exit on first failure' option.
   set +e

   run_command2 "make -j i386 DEBUG=1" "dietlibc_build.log"

   # Restore the 'exit on first failure'
   set -e

   popd

}

##############################
# Build gtest
##############################

function build_gtest {

   pushd .
   git clone https://github.com/google/googletest.git
   cd googletest/googletest
   git checkout release-1.8.0
   $CMAKE .
   run_command2 "make -j" "gtest_build.log"
   popd

}

##################################
# Build libmusl (unused for now)
##################################

function build_libmusl {

   pushd .

   git clone git://git.musl-libc.org/musl
   cd musl
   git checkout v1.1.16

   mkdir ../musl-install
   mkdir ../musl-install/lib

   libmusl_opts1="--target=i386 --host=i386 --build=x86_64 --disable-shared"
   libmusl_opts2="--prefix=$TC/musl-install --exec-prefix=$TC/musl-install"
   libmusl_opts3="--syslibdir=$TC/musl-install/lib"

   ./configure $libmusl_opts1 $libmusl_opts2 $libmusl_opts3

   make
   make install

   popd

}

##################################
# Build GNU EFI
##################################

function build_gnuefi {

   pushd .

   git clone https://git.code.sf.net/p/gnu-efi/code gnu-efi

   cd gnu-efi
   git checkout 3.0.6
   make

   popd
}

##########################################################
#
# MAIN
#
##########################################################


# Exit on the first failure
set -e

# Main project directory
MAIN_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Toolchain dir
TC=$MAIN_DIR/toolchain

# Make the scripts build_scripts runnable from everywhere
export PATH="$MAIN_DIR/scripts/build_scripts:$PATH"

mkdir -p $TC
cd $TC


if [ "$1" == "-s" ]; then

   if [ $# -ne 2 ]; then
      echo "Expected the name of the function to call after the $1 option"
   fi

   func="$2"

   if [ -n "$(type -t $func)" ] && [ "$(type -t $func)" = function ]; then
      echo "Executing single function '$func'"
      $func
   else
      echo "ERORR: The function '$func' does not exist."
      exit 1
   fi

   exit 0
fi



if [ "$1" == "--skip-install-pkgs" ]; then
   skip_install=true
   echo "*** SKIPPING installation of packages"
fi


if [ -z "$skip_install" ]; then
   install_packages
fi

build_cmake
build_lcov
build_dietlibc
build_gtest
build_gnuefi


